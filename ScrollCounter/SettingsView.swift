import SwiftUI

struct SettingsView: View {
    @EnvironmentObject var scrollDataManager: ScrollDataManager
    @EnvironmentObject var notificationManager: NotificationManager
    @State private var showingAccessibilityAlert = false
    @State private var showingNotificationAlert = false
    
    var body: some View {
        NavigationView {
            List {
                // „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
                AccessibilitySection()
                
                // ÈÄöÁü•Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
                NotificationSection()
                
                // Ë°®Á§∫Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
                DisplaySection()
                
                // „Éá„Éº„ÇøÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥
                DataManagementSection()
                
                // „Ç¢„Éó„É™ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
                AppInfoSection()
            }
            .navigationTitle("Ë®≠ÂÆö")
            .navigationBarTitleDisplayMode(.large)
        }
        .onAppear {
            // ÁîªÈù¢Ë°®Á§∫ÊôÇ„Å´„Çπ„ÇØ„É≠„Éº„É´Ê§úÂá∫
            Task {
                await simulateScrollDetection(appName: "Ë®≠ÂÆö", distance: 20.0)
            }
        }
        .alert("„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ë®≠ÂÆö", isPresented: $showingAccessibilityAlert) {
            Button("Ë®≠ÂÆö„ÇíÈñã„Åè") {
                openAccessibilitySettings()
            }
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
        } message: {
            Text("„Çπ„ÇØ„É≠„Éº„É´Ë∑ùÈõ¢„ÇíË®àÊ∏¨„Åô„Çã„Å´„ÅØ„ÄÅË®≠ÂÆö„Ç¢„Éó„É™„Åß„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ê®©Èôê„ÇíÊúâÂäπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        }
        .alert("ÈÄöÁü•Ë®≠ÂÆö", isPresented: $showingNotificationAlert) {
            Button("Ë®≠ÂÆö„ÇíÈñã„Åè") {
                openNotificationSettings()
            }
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
        } message: {
            Text("ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„Å´„ÅØ„ÄÅË®≠ÂÆö„Ç¢„Éó„É™„ÅßÈÄöÁü•Ê®©Èôê„ÇíÊúâÂäπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        }
    }
    
    // MARK: - „Çπ„ÇØ„É≠„Éº„É´Ê§úÂá∫„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    private func simulateScrollDetection(appName: String, distance: Double) async {
        print("‚öôÔ∏è [SettingsView] „Çπ„ÇØ„É≠„Éº„É´Ê§úÂá∫: \(appName) - \(distance)m")
        NotificationCenter.default.post(
            name: NSNotification.Name("ScrollDetected"),
            object: nil,
            userInfo: [
                "distance": distance,
                "appName": appName
            ]
        )
        print("üì§ [SettingsView] ÈÄöÁü•ÈÄÅ‰ø°ÂÆå‰∫Ü")
    }
    
    // MARK: - „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
    @ViewBuilder
    private func AccessibilitySection() -> some View {
        Section {
            HStack {
                Image(systemName: "accessibility")
                    .foregroundColor(.blue)
                    .frame(width: 24)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ê®©Èôê")
                        .font(.body)
                    
                    Text(scrollDataManager.hasAccessibilityPermission ? "ÊúâÂäπ" : "ÁÑ°Âäπ")
                        .font(.caption)
                        .foregroundColor(scrollDataManager.hasAccessibilityPermission ? .green : .red)
                }
                
                Spacer()
                
                if !scrollDataManager.hasAccessibilityPermission {
                    Button("Ë®≠ÂÆö") {
                        showingAccessibilityAlert = true
                    }
                    .buttonStyle(.bordered)
                }
            }
            
            HStack {
                Image(systemName: scrollDataManager.isMonitoring ? "play.circle.fill" : "pause.circle.fill")
                    .foregroundColor(scrollDataManager.isMonitoring ? .green : .orange)
                    .frame(width: 24)
                
                Text("„Çπ„ÇØ„É≠„Éº„É´Ë®àÊ∏¨")
                
                Spacer()
                
                Toggle("", isOn: Binding(
                    get: { scrollDataManager.isMonitoring },
                    set: { newValue in
                        if newValue {
                            scrollDataManager.startMonitoring()
                        } else {
                            scrollDataManager.stopMonitoring()
                        }
                    }
                ))
            }
        } header: {
            Text("Ë®àÊ∏¨Ë®≠ÂÆö")
        } footer: {
            Text("„Çπ„ÇØ„É≠„Éº„É´Ë∑ùÈõ¢„ÇíË®àÊ∏¨„Åô„Çã„Å´„ÅØ„ÄÅ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ê®©Èôê„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ")
        }
    }
    
    // MARK: - ÈÄöÁü•Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
    @ViewBuilder
    private func NotificationSection() -> some View {
        Section {
            HStack {
                Image(systemName: "bell")
                    .foregroundColor(.orange)
                    .frame(width: 24)
                
                Text("ÈÄöÁü•")
                
                Spacer()
                
                Toggle("", isOn: Binding(
                    get: { notificationManager.isNotificationEnabled },
                    set: { newValue in
                        if newValue && !notificationManager.hasPermission {
                            showingNotificationAlert = true
                        } else {
                            notificationManager.toggleNotifications(newValue)
                        }
                    }
                ))
            }
            
            if notificationManager.isNotificationEnabled {
                HStack {
                    Image(systemName: "clock")
                        .foregroundColor(.blue)
                        .frame(width: 24)
                    
                    Text("ÈÄöÁü•ÊôÇÂàª")
                    
                    Spacer()
                    
                    DatePicker("", selection: Binding(
                        get: { notificationManager.notificationTime },
                        set: { newTime in
                            notificationManager.updateNotificationTime(newTime)
                        }
                    ), displayedComponents: .hourAndMinute)
                    .labelsHidden()
                }
                
                HStack {
                    Image(systemName: "leaf.arrow.circlepath")
                        .foregroundColor(.green)
                        .frame(width: 24)
                    
                    Text("„Éá„Éà„ÉÉ„ÇØ„ÇπÈÄöÁü•")
                    
                    Spacer()
                    
                    Toggle("", isOn: Binding(
                        get: { notificationManager.detoxNotificationsEnabled },
                        set: { newValue in
                            notificationManager.toggleDetoxNotifications(newValue)
                        }
                    ))
                }
                
                Button(action: {
                    Task {
                        await notificationManager.sendTestNotification()
                    }
                }) {
                    HStack {
                        Image(systemName: "paperplane")
                            .foregroundColor(.green)
                            .frame(width: 24)
                        
                        Text("„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°")
                            .foregroundColor(.primary)
                        
                        Spacer()
                    }
                }
            }
        } header: {
            Text("ÈÄöÁü•Ë®≠ÂÆö")
        } footer: {
            Text("ÊØéÊó•ÊåáÂÆö„Åó„ÅüÊôÇÂàª„Å´„Çπ„ÇØ„É≠„Éº„É´Ë∑ùÈõ¢„Çí„ÅäÁü•„Çâ„Åõ„Åó„Åæ„Åô„ÄÇ")
        }
    }
    
    // MARK: - Ë°®Á§∫Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
    @ViewBuilder
    private func DisplaySection() -> some View {
        Section {
            NavigationLink(destination: ExcludedAppsView()) {
                HStack {
                    Image(systemName: "app.badge.checkmark")
                        .foregroundColor(.blue)
                        .frame(width: 24)
                    
                    Text("Ë®àÊ∏¨ÂØæË±°„Ç¢„Éó„É™")
                    
                    Spacer()
                    
                    Text("ÁÆ°ÁêÜ")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            HStack {
                Image(systemName: "sparkles")
                    .foregroundColor(.yellow)
                    .frame(width: 24)
                
                Text("„Éç„ÇøË°®Á§∫")
                
                Spacer()
                
                Toggle("", isOn: .constant(true)) // ÂÆüÈöõ„ÅÆ„Ç¢„Éó„É™„Åß„ÅØË®≠ÂÆö„Çí‰øùÂ≠ò
            }
        } header: {
            Text("Ë°®Á§∫Ë®≠ÂÆö")
        } footer: {
            Text("Ë∑ùÈõ¢ÊèõÁÆó„ÇÑ„É¶„Éº„É¢„Ç¢„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà„Åß„Åç„Åæ„Åô„ÄÇ")
        }
    }
    
    // MARK: - „Éá„Éº„ÇøÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥
    @ViewBuilder
    private func DataManagementSection() -> some View {
        Section {
            Button(action: {
                scrollDataManager.saveCurrentData()
            }) {
                HStack {
                    Image(systemName: "square.and.arrow.down")
                        .foregroundColor(.blue)
                        .frame(width: 24)
                    
                    Text("„Éá„Éº„Çø„Çí‰øùÂ≠ò")
                        .foregroundColor(.primary)
                    
                    Spacer()
                }
            }
            
            Button(action: {
                // „Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩÔºàÂÆüË£Ö‰∫àÂÆöÔºâ
            }) {
                HStack {
                    Image(systemName: "square.and.arrow.up")
                        .foregroundColor(.green)
                        .frame(width: 24)
                    
                    Text("„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà")
                        .foregroundColor(.primary)
                    
                    Spacer()
                }
            }
            
            Button(action: {
                // „Éá„Éº„Çø„É™„Çª„ÉÉ„ÉàÁ¢∫Ë™ç„Ç¢„É©„Éº„ÉàË°®Á§∫ÔºàÂÆüË£Ö‰∫àÂÆöÔºâ
            }) {
                HStack {
                    Image(systemName: "trash")
                        .foregroundColor(.red)
                        .frame(width: 24)
                    
                    Text("„Éá„Éº„Çø„Çí„É™„Çª„ÉÉ„Éà")
                        .foregroundColor(.red)
                    
                    Spacer()
                }
            }
        } header: {
            Text("„Éá„Éº„ÇøÁÆ°ÁêÜ")
        } footer: {
            Text("„Çπ„ÇØ„É≠„Éº„É´„Éá„Éº„Çø„ÅØ„Åô„Åπ„Å¶Á´ØÊú´ÂÜÖ„Å´‰øùÂ≠ò„Åï„Çå„ÄÅÂ§ñÈÉ®„Å´ÈÄÅ‰ø°„Åï„Çå„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
        }
    }
    
    // MARK: - „Ç¢„Éó„É™ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
    @ViewBuilder
    private func AppInfoSection() -> some View {
        Section {
            HStack {
                Image(systemName: "info.circle")
                    .foregroundColor(.blue)
                    .frame(width: 24)
                
                Text("„Éê„Éº„Ç∏„Éß„É≥")
                
                Spacer()
                
                Text("1.0.0")
                    .foregroundColor(.secondary)
            }
            
            Link(destination: URL(string: "https://github.com")!) {
                HStack {
                    Image(systemName: "link")
                        .foregroundColor(.blue)
                        .frame(width: 24)
                    
                    Text("GitHub")
                        .foregroundColor(.primary)
                    
                    Spacer()
                    
                    Image(systemName: "arrow.up.right.square")
                        .foregroundColor(.secondary)
                        .font(.caption)
                }
            }
            
            Link(destination: URL(string: "mailto:support@scrollcounter.app")!) {
                HStack {
                    Image(systemName: "envelope")
                        .foregroundColor(.blue)
                        .frame(width: 24)
                    
                    Text("„ÅäÂïè„ÅÑÂêà„Çè„Åõ")
                        .foregroundColor(.primary)
                    
                    Spacer()
                    
                    Image(systemName: "arrow.up.right.square")
                        .foregroundColor(.secondary)
                        .font(.caption)
                }
            }
        } header: {
            Text("„Ç¢„Éó„É™ÊÉÖÂ†±")
        }
    }
    
    // MARK: - „Éò„É´„Éë„ÉºÈñ¢Êï∞
    private func openAccessibilitySettings() {
        if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(settingsUrl)
        }
    }
    
    private func openNotificationSettings() {
        if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(settingsUrl)
        }
    }
}

// MARK: - Èô§Â§ñ„Ç¢„Éó„É™ÁÆ°ÁêÜÁîªÈù¢
struct ExcludedAppsView: View {
    @State private var excludedApps: Set<String> = []
    @State private var availableApps = [
        "Safari", "Chrome", "Twitter", "Instagram", "TikTok", "YouTube", 
        "LINE", "Discord", "Slack", "Notion", "Reddit", "Pinterest"
    ]
    
    var body: some View {
        List {
            Section {
                ForEach(availableApps, id: \.self) { app in
                    HStack {
                        Image(systemName: "app.badge")
                            .foregroundColor(.blue)
                        
                        Text(app)
                        
                        Spacer()
                        
                        Toggle("", isOn: Binding(
                            get: { !excludedApps.contains(app) },
                            set: { isIncluded in
                                if isIncluded {
                                    excludedApps.remove(app)
                                } else {
                                    excludedApps.insert(app)
                                }
                            }
                        ))
                    }
                }
            } header: {
                Text("„Ç¢„Éó„É™‰∏ÄË¶ß")
            } footer: {
                Text("„Ç™„Éï„Å´„Åó„Åü„Ç¢„Éó„É™„ÅØ„Çπ„ÇØ„É≠„Éº„É´Ë∑ùÈõ¢„ÅÆË®àÊ∏¨ÂØæË±°„Åã„ÇâÈô§Â§ñ„Åï„Çå„Åæ„Åô„ÄÇ")
            }
        }
        .navigationTitle("Ë®àÊ∏¨ÂØæË±°„Ç¢„Éó„É™")
        .navigationBarTitleDisplayMode(.inline)
    }
}

struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        SettingsView()
            .environmentObject(ScrollDataManager())
            .environmentObject(NotificationManager())
    }
}
